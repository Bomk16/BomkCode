using System.Linq;
using Content.Client.UserInterface.Controls;
using Content.Server._Crescent.Broadcaster;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._Crescent.Broadcaster;

[GenerateTypedNameReferences]
public sealed partial class BroadcasterUI : FancyWindow
{
    private Dictionary<int, string> broadcastMessages;
    public Action<int>? ClickBroadcast;
    private ItemList MessageList;

    public BroadcasterUI()
    {
        RobustXamlLoader.Load(this);
        MessageList = new();
        broadcastMessages = new Dictionary<int, string>();
        Outer.AddChild(MessageList);
        Title = Loc.GetString("announcer-menu-title");
        MessageList.SelectMode = ItemList.ItemListSelectMode.Button;
        MessageList.OnItemSelected += OnItemSelect;
    }

    public void setBroadcastables(Dictionary<int, string> playables)
    {
        Outer.RemoveChild(MessageList);
        MessageList = new ItemList();
        MessageList.SelectMode = ItemList.ItemListSelectMode.Button;
        MessageList.OnItemSelected += OnItemSelect;
        broadcastMessages = playables;
        Outer.AddChild(MessageList);
        foreach (var message in playables)
        {
            MessageList.AddItem(message.Value);
        }
    }

    public void setPlaying(int playingIndex)
    {
        var enumerating = MessageList.GetEnumerator();
        while (enumerating.MoveNext())
        {
            enumerating.Current.Disabled = false;
        }

        if (playingIndex == -1)
            return;

        foreach (var (serverIndex, Name) in broadcastMessages)
        {
            if (playingIndex != serverIndex)
                continue;
            enumerating.Reset();
            while (enumerating.MoveNext())
            {
                if (enumerating.Current.Text == Name)
                {
                    enumerating.Current.Disabled = true;
                }
            }
        }
    }

    private void OnItemSelect(ItemList.ItemListSelectedEventArgs obj)
    {
        var mess = broadcastMessages.ElementAt(obj.ItemIndex);
        ClickBroadcast?.Invoke(mess.Key);
    }
}
