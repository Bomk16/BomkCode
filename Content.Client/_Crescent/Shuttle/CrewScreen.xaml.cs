using System.Linq;
using System.Numerics;
using Content.Client.Shuttles.Systems;
using Content.Shared._NF.Shuttles.Components;
using Content.Shared.Shuttles.BUIStates;
using Content.Shared.Shuttles.Components;
using Content.Shared.Shuttles.Systems;
using Content.Shared.Shuttles.UI.MapObjects;
using Content.Shared.Timing;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Audio;
using Robust.Shared.Audio.Systems;
using Robust.Shared.Map;
using Robust.Shared.Map.Components;
using Robust.Shared.Physics.Components;
using Robust.Shared.Player;
using Robust.Shared.Random;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client._Crescent.Shuttle;

[GenerateTypedNameReferences]
public sealed partial class CrewScreen : BoxContainer
{
    [Dependency] private readonly IEntityManager _entManager = default!;

    public Action<string>? toggleEmployeeClicked;
    public bool HasID = false;

    public CrewScreen()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        OnVisibilityChanged += OnVisChange;
    }

    public void UpdateState(CrewInterfaceState state)
    {
        accesButtons.RemoveAllChildren();
        if (state.IdCodes is null || state.Pressed is null)
        {
            targetIdButton.Text = "Insert Employee ID";
            return;
        }
        if (state.hasId)
        {
            targetIdButton.Text = state.IdName;
            foreach (var identifier in state.IdCodes)
            {
                var button = new Button()
                {
                    Text = identifier,
                    ToggleMode = true,
                    Pressed = state.Pressed.Contains(identifier),

                };
                button.OnButtonDown += (args) => toggleEmployeeClicked?.Invoke(identifier);
                accesButtons.AddChild(button);
            }

        }


    }



    private void OnVisChange(Control obj)
    {
        if (!obj.Visible)
            return;

    }

}
